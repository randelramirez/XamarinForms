<?xml version="1.0" encoding="utf-8" ?>
<!-- Each of the seven Label views shows a somewhat different way of defining the displayed text. -->
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="XamarinForms.TextVariationsPage">

  <ContentPage.Padding>
    <OnPlatform x:TypeArguments="Thickness"
                iOS="0, 20, 0, 0" />
  </ContentPage.Padding>

  <ScrollView>
    <StackLayout>
      <!-- The simplest approach involves just setting a few words to the Text attribute of the Label element -->
      <Label VerticalOptions="CenterAndExpand"
             Text="Single lines of text are easy." />

      <!-- When you set text as the content of the Label (whether you use the Label.Text tags or not), 
      the text is trimmed: all white space, including carriage returns, is removed from the beginning and end of the text. 
      However, all embedded white space is retained, including end-of-line characters. -->
      <Label VerticalOptions="CenterAndExpand">
        <!-- You can also set the Text property by breaking it out as a property element -->
        <Label.Text>
          Text can also be content of the Text property.
        </Label.Text>
      </Label>
      <Label VerticalOptions="CenterAndExpand">
        <!-- Text is the content property of Label, so you don’t need the Label.Text tags -->
        Text is the content property of Label.
      </Label>

      <!-- When you set the Text property as a property attribute, all white space within the quotation marks is retained, 
      but if the text occupies more than one line in the XAML file, each end-of-line character (or character sequence) is converted to a single space. -->
      <!-- As a result, displaying a whole paragraph of uniformly formatted text is somewhat problematic. The most foolproof approach is setting Text as a property attribute.
      You can put the whole paragraph as a single line in the XAML file, but if you prefer to use multiple lines, 
      you should left justify the whole par-agraph in the XAML file surrounded by quotation marks, like so:-->
      <Label VerticalOptions="CenterAndExpand"
             Text=
"Perhaps the best way to define a paragraph of
uniformly formatted text is by setting the Text
property as an attribute and left justifying
the block of text in the XAML file. End-of-line
characters are converted to a space character." />

      <Label VerticalOptions="CenterAndExpand">
        Text as content has the curse
        Of breaks at each line's close.
        That's a format great for verse
        But not the best for prose.
      </Label>

      <!-- If your line or paragraph of text requires some nonuniform paragraph formatting, you’ll want to use the FormattedText property of Label. 
      As you might recall, you set this to a FormattedString ob-ject and then set multiple Span objects to the Spans collection of the FormattedString. 
      In XAML, you need property-element tags for Label.FormattedString, but Spans is the content property of FormattedString: -->
      <!-- Notice that the Text properties of the nonformatted items have spaces at the end or beginning of the text string, 
      or both, so that the items don’t run into each other. -->
      <Label VerticalOptions="CenterAndExpand">
        <Label.FormattedText>
          <FormattedString>
            <Span Text="A single line with " />
            <Span Text="bold" FontAttributes="Bold" />
            <Span Text=" and " />
            <Span Text="italic" FontAttributes="Italic" />
            <Span Text=" and " />
            <Span Text="large" FontSize="Large" />
            <Span Text=" text." />
          </FormattedString>
        </Label.FormattedText>
      </Label>

      <!-- In the general case, however, you might be working with an entire paragraph. You can set the Text attribute of Span to a long line, or you can wrap it on multiple lines. As with Label, keep the entire block left justified in the XAML file: -->
      <Label VerticalOptions="CenterAndExpand">
        <Label.FormattedText>
          <FormattedString>
            <Span Text=
"A paragraph of formatted text requires left justifying
it within the XAML file. But the text can include multiple
kinds of character formatting, including " />
            <Span Text="bold" FontAttributes="Bold" />
            <Span Text=" and " />
            <Span Text="italic" FontAttributes="Italic" />
            <Span Text=" and " />
            <Span Text="large" FontSize="Large" />
            <Span Text=
" and whatever combinations you might desire to adorn
your glorious prose." />
          </FormattedString>
        </Label.FormattedText>
      </Label>
    </StackLayout>
  </ScrollView>
</ContentPage>